UserServiceImpl:
获取键为key对应的value:
        (1)String umsMemberStr = jedis.get("user:" + umsMember.getPassword() + umsMember.getUsername() + ":info");
增加数据项并设置有效时间:
        (2)jedis.setex("user:" + umsMember.getPassword() + umsMember.getUsername() + ":info", 60 * 60 * 24, JSON.toJSONString(umsMemberFromDb));

        (3)jedis.setex("user:" + memberId + ":token", 60 * 60 * 2, token);

CartServiceImpl:
        (4)Map<String, String> map = new HashMap<>();
        for (OmsCartItem cartItem : omsCartItems) {
        cartItem.setTotalPrice(cartItem.getPrice().multiply(cartItem.getQuantity()));
        map.put(cartItem.getProductSkuId(), JSON.toJSONString(cartItem));
        }
删除键为key的数据项:
        jedis.del("user:" + memberId + ":cart");
往Hash插入一个元素(k-v):
        jedis.hmset("user:" + memberId + ":cart", map);

        (5)
获取Hash所有元素的value:
        List<String> hvals = jedis.hvals("user:" + userId + ":cart");

        for (String hval : hvals) {
        OmsCartItem omsCartItem = JSON.parseObject(hval, OmsCartItem.class);
        omsCartItems.add(omsCartItem);
        }

SkuServiceImpl:
        (6)System.out.println("ip为" + ip + "的同学:" + Thread.currentThread().getName() + "进入的商品详情的请求");
                PmsSkuInfo pmsSkuInfo = new PmsSkuInfo();
                // 链接缓存
                Jedis jedis = redisUtil.getJedis();
                // 查询缓存
                String skuKey = "sku:" + skuId + ":info";
                String skuJson = jedis.get(skuKey);

                if (StringUtils.isNotBlank(skuJson)) {//if(skuJson!=null&&!skuJson.equals(""))
                System.out.println("ip为" + ip + "的同学:" + Thread.currentThread().getName() + "从缓存中获取商品详情");

                pmsSkuInfo = JSON.parseObject(skuJson, PmsSkuInfo.class);
                } else {
                // 如果缓存中没有，查询mysql
                System.out.println("ip为" + ip + "的同学:" + Thread.currentThread().getName() + "发现缓存中没有，申请缓存的分布式锁：" + "sku:" + skuId + ":lock");

                // 设置分布式锁
                String token = UUID.randomUUID().toString();
不覆盖增加数据项(重复不插入):  String OK = jedis.set("sku:" + skuId + ":lock", token, "nx", "px", 10 * 1000);// 拿到锁的线程有10秒的过期时间
                if (StringUtils.isNotBlank(OK) && OK.equals("OK")) {
                // 设置成功，有权在10秒的过期时间内访问数据库
                System.out.println("ip为" + ip + "的同学:" + Thread.currentThread().getName() + "有权在10秒的过期时间内访问数据库：" + "sku:" + skuId + ":lock");

                pmsSkuInfo = getSkuByIdFromDb(skuId);

                if (pmsSkuInfo != null) {
                // mysql查询结果存入redis
                jedis.set("sku:" + skuId + ":info", JSON.toJSONString(pmsSkuInfo));
                } else {
                // 数据库中不存在该sku
                // 为了防止缓存穿透将，null或者空字符串值设置给redis
增加数据项并设置有效时间:jedis.setex("sku:" + skuId + ":info", 60 * 3, JSON.toJSONString(""));
                }

                // 在访问mysql后，将mysql的分布锁释放
                System.out.println("ip为" + ip + "的同学:" + Thread.currentThread().getName() + "使用完毕，将锁归还：" + "sku:" + skuId + ":lock");
                String lockToken = jedis.get("sku:" + skuId + ":lock");
                if (StringUtils.isNotBlank(lockToken) && lockToken.equals(token)) {
                //jedis.eval("lua");可与用lua脚本，在查询到key的同时删除该key，防止高并发下的意外的发生
删除键为key对应的value:jedis.del("sku:" + skuId + ":lock");// 用token确认删除的是自己的sku的锁
                }
                } else {
                // 设置失败，自旋（该线程在睡眠几秒后，重新尝试访问本方法）
                System.out.println("ip为" + ip + "的同学:" + Thread.currentThread().getName() + "没有拿到锁，开始自旋");

                return getSkuById(skuId, ip);
                }
                }
                jedis.close();

        (7)       // 同步到redis缓存中
                Jedis jedis = redisUtil.getJedis();
                //jedis.hdel("order:" + skuId + ":info",pmsSkuInfo);
                // jedis.hmset("order:" + skuId + ":info", map);
                jedis.del("sku:" + skuId + ":info");
                jedis.set("sku:" + skuId + ":info", JSON.toJSONString(pmsSkuInfo));
                jedis.close();
OrderServiceImpl:
        (8)String tradeKey = "user:" + memberId + ":tradeCode";
        //String tradeCodeFromCache = jedis.get(tradeKey);// 使用lua脚本在发现key的同时将key删除，防止并发订单攻击
        //对比防重删令牌
        String script = "if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end";
        Long eval = (Long) jedis.eval(script, Collections.singletonList(tradeKey), Collections.singletonList(tradeCode));
        if (eval!=null&&eval!=0) {
        jedis.del(tradeKey);

        (9)String tradeKey = "user:"+memberId+":tradeCode";
        String tradeCode = UUID.randomUUID().toString();
        jedis.setex(tradeKey,60*15,tradeCode);

        (10)// 同步到redis缓存中
        Jedis jedis = redisUtil.getJedis();
        Map<String, String> map = new HashMap<>();
        for (OmsOrder order : omsOrders) {
        map.put(order.getOrderSn(), JSON.toJSONString(order));
        }
        jedis.hdel("order:" + memberId + ":info",orderSn);
        jedis.hmset("order:" + memberId + ":info", map);








